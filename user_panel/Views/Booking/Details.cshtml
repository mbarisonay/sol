@model user_panel.Data.Cabin

@{
    ViewData["Title"] = $"Details for {Model.Location}";
}

<div class="container container-main-large">
    <div class="card-custom">
        <!-- Header -->
        <h2 class="text-center" style="color: var(--brand-accent);">@Model.Location</h2>
        <p class="text-center text-muted mb-4">Cabin Information & Location</p>

        <div class="row">
            <!-- Left Side: Information & Images -->
            <div class="col-lg-6">
                <h4>Description</h4>
                <p class="text-light">@Model.Description</p>

                <h4 class="mt-4">Price</h4>
                <p class="fs-4 fw-bold" style="color: var(--text-light);">@Model.PricePerHour.ToString("C")/hour</p>

                <!-- Placeholder for Images -->
                <h4 class="mt-4">Gallery</h4>
                <div class="row g-2">
                    <!-- You would loop through a list of image URLs here -->
                    <div class="col-6">
                        <img src="https://via.placeholder.com/400x300.png?text=Cabin+View+1" class="img-fluid rounded" alt="Cabin Image 1">
                    </div>
                    <div class="col-6">
                        <img src="https://via.placeholder.com/400x300.png?text=Interior+View" class="img-fluid rounded" alt="Cabin Image 2">
                    </div>
                </div>
                <a asp-controller="Booking" asp-action="Create" asp-route-id="@Model.Id" class="btn btn-primary btn-lg mt-4 w-100">Book This Cabin</a>
            </div>

            <!-- Right Side: Google Map -->
            <div class="col-lg-6">
                <h4>Exact Location</h4>
                <!-- This is the container for our dedicated map -->
                <div id="details-map-canvas" style="width: 100%; height: 450px; border-radius: 8px;"></div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let map;

        function initMap() {
            // Get the location string from the Model. We replace '/' with ',' for the geocoder.
            // Using Html.Raw and ToJson to safely encode the string for JavaScript.
            const cabinLocation = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Location.Replace('/', ',')));

            const geocoder = new google.maps.Geocoder();
            const mapCanvas = document.getElementById("details-map-canvas");

            geocoder.geocode({ 'address': cabinLocation + ', Turkey' }, (results, status) => {
                if (status === 'OK' && results[0]) {
                    const location = results[0].geometry.location;

                    map = new google.maps.Map(mapCanvas, {
                        zoom: 15, // A closer zoom for a details page
                        center: location,
                    });

                    new google.maps.Marker({
                        position: location,
                        map: map,
                        title: cabinLocation
                    });

                } else {
                    console.error(`Geocode failed for "${cabinLocation}" with status: ${status}`);
                    mapCanvas.innerHTML = '<div class="alert alert-danger">Sorry, the map location could not be found.</div>';
                }
            });
        }
    </script>

    <!-- Load the Google Maps API, calling our initMap function when it's ready -->
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA8D4toLWhdieE3j2CFoIV6mzUiSUpWCY0&callback=initMap"></script>
}