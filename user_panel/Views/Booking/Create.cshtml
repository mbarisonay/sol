@model user_panel.ViewModels.CreateBookingViewModel
@{
    ViewData["Title"] = "Book " + Model.Cabin.Location;
    int currentHour = DateTime.Now.Hour;
}

<div class="row justify-content-center">
    <div class="col-md-8">
        <div class="card-custom mt-4">
            <h2 class="mb-3">@ViewData["Title"]</h2>
            <p class="text-muted">Price: @Model.Cabin.PricePerHour.ToString("C") per hour</p>
            <hr />

            <!-- Display Error/Success Messages -->
            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
            }
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success">@TempData["SuccessMessage"]</div>
            }

            <!-- Date Selection Form -->
            <form asp-action="Create" asp-route-id="@Model.Cabin.Id" method="get" class="mb-4">
                <div class="form-group">
                    <label asp-for="BookingDate" class="form-label"></label>
                    <!-- === ADDED bg-dark and text-light CLASSES === -->
                    <input asp-for="BookingDate" class="form-control bg-dark text-light" onchange="this.form.submit()" />
                </div>
            </form>

            <!-- Time Selection & Booking Form -->
            <form asp-action="Create" method="post">
                @Html.AntiForgeryToken()
                <input type="hidden" name="cabinId" value="@Model.Cabin.Id" />
                <input type="hidden" name="bookingDate" value="@Model.BookingDate.ToShortDateString()" />

                <div class="form-group">
                    <label class="form-label">Select a Time Slot for @Model.BookingDate.ToLongDateString()</label>
                    <!-- === ADDED bg-dark and text-light CLASSES === -->
                    <select id="startTimeHour" name="startTimeHour" class="form-select bg-dark text-light" required>
                        <option value="">-- Choose a time --</option>
                        @for (int hour = 9; hour <= 22; hour++)
                        {
                            bool isUnavailable = Model.BookedHours.Contains(hour) || (Model.BookingDate.Date == DateTime.Today && hour < currentHour);

                            <option value="@hour" disabled="@isUnavailable">
                                @{
                                    var startTime = new DateTime(1, 1, 1, hour, 0, 0);
                                    var endTime = startTime.AddHours(1);
                                    string timeSlotText = $"{startTime:HH:mm} - {endTime:HH:mm}";
                                }
                                @timeSlotText

                                @if (isUnavailable)
                                {
                                    bool isBooked = Model.BookedHours.Contains(hour);
                                    if (isBooked)
                                    {
                                        <text>(Already Booked)</text>
                                    }
                                    else
                                    {

                                        <text>(Past)</text>
                                    }
                                }
                            </option>
                        }
                    </select>
                </div>

                <div class="mt-4 d-flex justify-content-between">
                    <a asp-action="Index" class="btn btn-secondary">Back to Cabins</a>
                    <button type="submit" class="btn btn-primary">Confirm Booking</button>
                </div>
            </form>
        </div>
    </div>
</div>