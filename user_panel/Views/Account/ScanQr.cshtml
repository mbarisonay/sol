@{
    ViewData["Title"] = "Scan QR Code";
    Layout = "_Layout";
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">@ViewData["Title"]</h3>
                </div>
                <div class="card-body text-center">

                    <!-- 1. The 'Viewfinder' for the QR Scanner -->
                    <div id="qr-reader" style="width: 100%; max-width: 500px; margin: 0 auto;"></div>

                    <!-- 2. A place to show the scan result -->
                    <div id="qr-scan-result" class="mt-3">
                        <div class="alert alert-info">Awaiting scan...</div>
                    </div>

                </div>
                <div class="card-footer">
                    <a class="btn btn-secondary" asp-controller="Account" asp-action="UserPanel">Back to User Panel</a>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- 3. Include the html5-qrcode library from a CDN -->
    <script src="https://unpkg.com/html5-qrcode" type="text/javascript"></script>

    <script>
        document.addEventListener('DOMContentLoaded', (event) => {

            const resultContainer = document.getElementById('qr-scan-result');
            const readerElement = document.getElementById('qr-reader');
            let lastResult, countResults = 0;

            // This function gets called when a QR code is successfully scanned.
            async function onScanSuccess(decodedText, decodedResult) {
                // Handle the scanned code as you like, for example:
                console.log(`Code matched = ${decodedText}`, decodedResult);

                if (decodedText !== lastResult) {
                    ++countResults;
                    lastResult = decodedText;

                    // Update the UI with the result
                    resultContainer.innerHTML = `
                        <div class="alert alert-success">
                            <strong>Success!</strong> Scanned QR Code:
                            <p>${decodedText}</p>
                        </div>`;

                    // OPTIONAL: Send the result to the server
                    try {
                        const response = await fetch('/Account/ProcessQrCode', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                // Required for ASP.NET Core anti-forgery
                                'RequestVerificationToken': document.getElementsByName('__RequestVerificationToken')[0].value
                            },
                            body: JSON.stringify(decodedText)
                        });

                        const data = await response.json();

                        if(data.success) {
                            console.log('Server processed QR code successfully.');
                            // Optionally, redirect or show another message
                            // window.location.href = data.redirectUrl;
                        } else {
                            console.error('Server returned an error:', data.message);
                            resultContainer.innerHTML += `<div class="alert alert-danger mt-2">Server Error: ${data.message}</div>`;
                        }

                    } catch (error) {
                        console.error('Failed to send QR code to server.', error);
                        resultContainer.innerHTML += `<div class="alert alert-danger mt-2">Could not contact server.</div>`;
                    }
                }
            }

            // This function is called if the scan fails (e.g., no QR code in view)
            function onScanFailure(error) {
                // You can ignore this or log it for debugging.
                // console.warn(`Code scan error = ${error}`);
            }

            // Create a new scanner instance
            let html5QrcodeScanner = new Html5QrcodeScanner(
                "qr-reader", // The ID of the viewfinder element
                {
                    fps: 10,
                    qrbox: { width: 250, height: 250 }, // The size of the scanning box
                    rememberLastUsedCamera: true, // Good for user experience
                    supportedScanTypes: [Html5QrcodeScanType.SCAN_TYPE_CAMERA]
                },
                /* verbose= */ false);

            // Start scanning
            html5QrcodeScanner.render(onScanSuccess, onScanFailure);
        });
    </script>
}