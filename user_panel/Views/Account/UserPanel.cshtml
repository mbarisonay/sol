
@using user_panel.Data
@model ApplicationUser
@{
    ViewData["Title"] = "User Panel";
}

<div class="container container-main-large">
    <div class="card-custom">
        <h2>Welcome, @Model.FirstName</h2>

        @if (TempData["StatusMessage"] != null)
        {
            <div class="alert alert-success mt-3" role="alert">
                @TempData["StatusMessage"]
            </div>
        }

        <div class="credit-balance-box mt-4">
            <div class="balance-label">Credit Balance</div>
            <div class="balance-amount">@Model.CreditBalance.ToString("C")</div>
            <a class="btn btn-sm btn-success" asp-action="AddCredit">Add Credit</a>
        </div>

        <div class="mt-4 user-details">
            <h5>Account Details</h5>
            <hr style="border-color: var(--border-color);" />
            <dl class="row">
                <dt class="col-sm-4">Full Name</dt>
                <dd class="col-sm-8">@Model.FirstName @Model.LastName</dd>

                <dt class="col-sm-4">E-mail Address</dt>
                <dd class="col-sm-8">@Model.Email</dd>

                <dt class="col-sm-4">Phone Number</dt>
                <dd class="col-sm-8">@Model.PhoneNumber</dd>
            </dl>
        </div>

        <div class="mt-4 d-flex justify-content-start gap-2">
            <button type="button" class="btn btn-primary mr-2" data-toggle="modal" data-target="#qrScannerModal">
                Scan QR
            </button>
            <a class="btn btn-warning" asp-action="ChangePassword">Change Password</a>
            <a class="btn btn-info" asp-action="UpdateInformation">Update Information</a>
            <form class="d-inline" asp-action="Logout" method="post">
                <button type="submit" class="btn btn-danger">Logout</button>
            </form>

        </div>
    </div>
</div>
<div class="modal fade" id="qrScannerModal" tabindex="-1" role="dialog" aria-labelledby="qrScannerModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="qrScannerModalLabel">Scan QR Code</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body text-center">
                <!-- The 'Viewfinder' for the QR Scanner -->
                <div id="qr-reader" style="width: 100%;"></div>
                <!-- A place to show the scan result -->
                <div id="qr-scan-result" class="mt-3"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <!-- Include the html5-qrcode library -->
    <script src="https://unpkg.com/html5-qrcode" type="text/javascript"></script>

    <script>
        document.addEventListener('DOMContentLoaded', (event) => {
            const modalElement = document.getElementById('qrScannerModal');
            const resultContainer = document.getElementById('qr-scan-result');
            let html5QrcodeScanner;

            // This function is called when a QR code is successfully scanned
            async function onScanSuccess(decodedText, decodedResult) {
                // Stop the scanner to turn off the camera
                await html5QrcodeScanner.clear();

                // Show a success message in the modal
                resultContainer.innerHTML = `
                    <div class="alert alert-success">
                        <strong>Success!</strong> Processing code...
                    </div>`;

                // Send the result to the server
                try {
                    const response = await fetch('/Account/ProcessQrCode', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.getElementsByName('__RequestVerificationToken')[0].value
                        },
                        body: JSON.stringify(decodedText)
                    });

                    const data = await response.json();

                    if(data.success) {
                        // Close the modal and show an alert on the main page
                        $(modalElement).modal('hide');
                        alert(`QR Code processed successfully! Data: ${decodedText}`);
                    } else {
                        resultContainer.innerHTML = `<div class="alert alert-danger mt-2">Server Error: ${data.message}</div>`;
                    }
                } catch (error) {
                    resultContainer.innerHTML = `<div class="alert alert-danger mt-2">Could not contact server.</div>`;
                }
            }

            // --- IMPORTANT: Modal Event Listeners ---

            // Fired when the modal is shown to the user
            $(modalElement).on('shown.bs.modal', function () {
                // Reset result message
                resultContainer.innerHTML = '<div class="alert alert-info">Point camera at a QR code.</div>';

                // Create and render the scanner
                html5QrcodeScanner = new Html5QrcodeScanner(
                    "qr-reader",
                    { fps: 10, qrbox: { width: 250, height: 250 } }
                );
                html5QrcodeScanner.render(onScanSuccess);
            });

            // Fired when the modal has finished being hidden from the user
            $(modalElement).on('hidden.bs.modal', function () {
                if (html5QrcodeScanner) {
                    // This is crucial to stop the camera from running in the background
                    html5QrcodeScanner.clear().catch(error => {
                        console.error("Failed to clear html5QrcodeScanner.", error);
                    });
                }
            });
        });
    </script>
}